
@startuml

    !include lexakai.theme
    
    title "com.telenav.mesakit.map.region.regions"
    
    abstract BaseStringConverter
    
    enum Country.AutomotiveSupportLevel
    {
        SUPPORTED
        UNDER_DEVELOPMENT
        UNSUPPORTED
    }
    
    Region <|-- City
    class City
    {
        --(constructors)--
        +City(State, RegionInstance<City>)
        --
        +City forIdentity(RegionIdentity)
        +City forRegionCode(RegionCode)
    }
    
    Region <|-- Continent
    abstract class Continent
    {
        --(constructors)--
        #Continent(RegionInstance<Continent>)
        --
        +Collection<Continent> all()
        +RegionBorderCache<Continent> borderCache()
        +Collection<Country> countries()
        +void create()
        +Continent forIdentity(RegionIdentity)
        +Continent forLocation(Location)
        --(collection)--
        +List<Country> allSupportedCountries()
        +boolean contains(Country)
        --(command line parsing)--
        +SwitchParser.Builder<Continent> continentSwitchParser(String name, String description)
    }
    
    BaseStringConverter <|-- Country.Converter
    class Country.Converter
    {
        --(constructors)--
        +Converter(Listener)
    }
    
    Region <|-- Country
    abstract class Country
    {
        --(constructors)--
        #Country(Continent, RegionInstance<Country>)
        --
        +Collection<Country> all()
        +Collection<Country> allSupported()
        +RegionInstance<Country> baseInstance()
        +RegionIdentity baseRegionCode()
        +RegionBorderCache<Country> borderCache()
        +DrivingSide drivingSide()
        +Country forIdentity(RegionIdentity)
        +Country forIsoCode(String iso)
        +Country forLocation(Location)
        +Country forNumericCountryCode(int code)
        +Country forRegionCode(RegionCode)
        +Set<Country> islands()
        +Set<Country> largeCountries()
        +Collection<Country> matching(Matcher<Country>)
        --(collection)--
        +Iterable<State> states()
        #List<LanguageIsoCode> languages(LanguageIsoCode... languages)
        --(command line parsing)--
        +SwitchParser.Builder<Country> countrySwitchParser(String name, String description)
        --(identity)--
        +Country forIdentifier(RegionIdentifier)
        --(math)--
        +Collection<Country> allLargerThan(Area minimum)
    }
    
    IntegerIdentifier <|-- Country.CountryTmcCode
    class Country.CountryTmcCode
    {
        --(constructors)--
        +CountryTmcCode(int)
    }
    
    Region <|-- County
    class County
    {
        --(constructors)--
        +County(State, RegionInstance<County>)
        --
        +Collection<County> all(Matcher<County>)
        +Collection<County> all()
        +RegionBorderCache<County> borderCache()
        +County forIdentity(RegionIdentity)
        +County forLocation(Location)
        +County forRegionCode(RegionCode)
        +State state()
        --(command line parsing)--
        +SwitchParser.Builder<County> countySwitchParser(String name, String description)
        --(identity)--
        +County forIdentifier(RegionIdentifier)
    }
    
    Region <|-- District
    class District
    {
        --(constructors)--
        +District(City, RegionInstance<District>)
        --
        +City city()
    }
    
    enum Country.DrivingSide
    {
        LEFT
        RIGHT
    }
    
    Region <|-- MetropolitanArea
    class MetropolitanArea
    {
        --(constructors)--
        +MetropolitanArea(State, RegionInstance<MetropolitanArea>)
        --
        +Collection<MetropolitanArea> all()
        +RegionBorderCache<MetropolitanArea> borderCache()
        +MetropolitanArea forIdentity(RegionIdentity)
        +MetropolitanArea forLocation(Location)
        +MetropolitanArea forRegionCode(RegionCode)
        +Collection<MetropolitanArea> matching(Matcher<MetropolitanArea>)
        +State state()
        --(command line parsing)--
        +SwitchParser.Builder<MetropolitanArea> metropolitanAreaSwitchParser(String name, String description)
        --(identity)--
        +MetropolitanArea forIdentifier(RegionIdentifier)
    }
    
    Region <|-- RectangularRegion
    class RectangularRegion
    {
        --(constructors)--
        +RectangularRegion(GridCell)
    }
    
    Region <|-- State
    class State
    {
        --(constructors)--
        +State(Country, RegionInstance<State>)
        --
        +Collection<State> all()
        +Collection<State> all(Matcher<State>)
        +RegionBorderCache<State> borderCache()
        +Set<City> cities()
        +Set<County> counties()
        +County county(RegionIdentity)
        +State forIdentity(RegionIdentity)
        +State forLocation(Location)
        +State forRegionCode(RegionCode)
        +MetropolitanArea metropolitanArea(RegionIdentity identifier)
        +Set<MetropolitanArea> metropolitanAreas()
        --(collection)--
        +boolean contains(County)
        +boolean contains(MetropolitanArea)
        --(command line parsing)--
        +SwitchParser.Builder<State> stateSwitchParser(String name, String description)
        --(identity)--
        +State forIdentifier(RegionIdentifier)
    }
    
    Region <|-- TimeZone
    class TimeZone
    {
        --(constructors)--
        +TimeZone(RegionInstance<TimeZone>)
        --
        +RegionBorderCache<TimeZone> borderCache()
        --(conversion)--
        +ZoneId asZoneId()
        --(time)--
        +TimeZone forIdentity(RegionIdentity)
        +TimeZone forLocation(Location)
        +TimeZone forRegionCode(RegionCode)
        +SwitchParser.Builder<TimeZone> timeZoneSwitchParser(String name, String description)
    }
    
    Region <|-- World
    class World
    {
    }
    
@enduml

