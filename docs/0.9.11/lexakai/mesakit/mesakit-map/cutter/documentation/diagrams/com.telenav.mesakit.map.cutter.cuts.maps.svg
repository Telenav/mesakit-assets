<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="675px" preserveAspectRatio="none" style="width:798px;height:675px;background:#333333;" version="1.1" viewBox="0 0 798 675" width="798.9583px" zoomAndPan="magnify"><defs/><g><rect fill="#48494B" height="41.2028" rx="8.3333" ry="8.3333" style="stroke:#545454;stroke-width:1.0416666666666667;" width="451.0417" x="166.6667" y="2.0833"/><text fill="#C0C0C0" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="20.8333" lengthAdjust="spacing" textLength="428.125" x="178.125" y="30.5583">com.telenav.mesakit.map.cutter.cuts.maps</text><!--MD5=[8b33ae288c4471ebf90bc7399bfed232]
class RegionIndexMap--><rect codeLine="6" fill="#282828" height="249.6704" id="RegionIndexMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="412.5" x="7.2917" y="87.557"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="412.5" x="7.2917" y="87.557"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="412.5" x="7.2917" y="110.612"/><rect codeLine="6" fill="none" height="249.6704" id="RegionIndexMap" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="412.5" x="7.2917" y="87.557"/><ellipse cx="152.6042" cy="103.2511" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M154.5146,107.6762 Q154.0873,107.8959 153.6174,108.0058 Q153.1474,108.1156 152.6286,108.1156 Q150.7853,108.1156 149.8149,106.901 Q148.8444,105.6864 148.8444,103.3915 Q148.8444,101.0905 149.8149,99.8759 Q150.7853,98.6613 152.6286,98.6613 Q153.1474,98.6613 153.6235,98.7712 Q154.0995,98.881 154.5146,99.1007 L154.5146,101.1027 Q154.0507,100.6755 153.6143,100.4771 Q153.1779,100.2787 152.714,100.2787 Q151.7253,100.2787 151.2217,101.063 Q150.7182,101.8473 150.7182,103.3915 Q150.7182,104.9296 151.2217,105.7139 Q151.7253,106.4982 152.714,106.4982 Q153.1779,106.4982 153.6143,106.2998 Q154.0507,106.1015 154.5146,105.6742 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="107.2917" x="175.5208" y="107.9753">RegionIndexMap</text><line style="stroke:#5E5E5E;stroke-width:1.5625;" x1="8.3333" x2="418.75" y1="118.9453" y2="118.9453"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="8.3333" x2="418.75" y1="127.2786" y2="127.2786"/><ellipse cx="18.75" cy="138.737" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="318.75" x="30.2083" y="145.6482">RegionSet regionsForIndexes(Iterable&lt;Integer&gt; indexes)</text><ellipse cx="18.75" cy="182.3934" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="94.7917" x="30.2083" y="189.3046">void add(Region)</text><ellipse cx="18.75" cy="202.1383" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="271.875" x="30.2083" y="209.0495">void addAll(Iterable&lt;? extends Region&gt; regions)</text><ellipse cx="18.75" cy="221.8831" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="78.125" x="30.2083" y="228.7944">Count count()</text><ellipse cx="18.75" cy="241.628" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="178.125" x="30.2083" y="248.5392">Integer indexForRegion(Region)</text><ellipse cx="18.75" cy="261.3729" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="272.9167" x="30.2083" y="268.2841">boolean isValidRegionIndex(Integer regionIndex)</text><ellipse cx="18.75" cy="281.1178" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="380.2083" x="30.2083" y="288.029">boolean isValidRegionIndexList(Collection&lt;Integer&gt; regionIndexes)</text><ellipse cx="18.75" cy="300.8626" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="185.4167" x="30.2083" y="307.7738">Region regionForIndex(int index)</text><ellipse cx="18.75" cy="320.6075" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="47.9167" x="30.2083" y="327.5187">int size()</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="8.3333" x2="179.1667" y1="165.2293" y2="165.2293"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="62.5" x="182.2917" y="169.0389">(collection)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="247.9167" x2="418.75" y1="165.2293" y2="165.2293"/><!--MD5=[ff3f88365541354a46901559b299d6d6]
class RegionNodes--><rect codeLine="21" fill="#282828" height="317.2384" id="RegionNodes" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="335.4167" x="456.25" y="53.7028"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="335.4167" x="456.25" y="53.7028"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="335.4167" x="456.25" y="76.7578"/><rect codeLine="21" fill="none" height="317.2384" id="RegionNodes" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="335.4167" x="456.25" y="53.7028"/><ellipse cx="573.9583" cy="69.397" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M575.8687,73.822 Q575.4415,74.0417 574.9715,74.1516 Q574.5015,74.2615 573.9827,74.2615 Q572.1395,74.2615 571.169,73.0469 Q570.1986,71.8323 570.1986,69.5374 Q570.1986,67.2363 571.169,66.0217 Q572.1395,64.8071 573.9827,64.8071 Q574.5015,64.8071 574.9776,64.917 Q575.4537,65.0269 575.8687,65.2466 L575.8687,67.2485 Q575.4049,66.8213 574.9685,66.6229 Q574.5321,66.4246 574.0682,66.4246 Q573.0794,66.4246 572.5759,67.2089 Q572.0723,67.9932 572.0723,69.5374 Q572.0723,71.0754 572.5759,71.8597 Q573.0794,72.644 574.0682,72.644 Q574.5321,72.644 574.9685,72.4457 Q575.4049,72.2473 575.8687,71.8201 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="85.4167" x="596.875" y="74.1211">RegionNodes</text><line style="stroke:#5E5E5E;stroke-width:1.5625;" x1="457.2917" x2="790.625" y1="85.0911" y2="85.0911"/><ellipse cx="467.7083" cy="120.461" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="214.5833" x="479.1667" y="127.3722">RegionNodes(String, RegionIndexMap)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="457.2917" x2="580.2083" y1="103.2969" y2="103.2969"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="81.25" x="583.3333" y="107.1065">(constructors)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="667.7083" x2="790.625" y1="103.2969" y2="103.2969"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="457.2917" x2="790.625" y1="137.0809" y2="137.0809"/><ellipse cx="467.7083" cy="148.5392" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="303.125" x="479.1667" y="155.4504">boolean inRegion(long nodeIdentifier, int regionIndex)</text><ellipse cx="467.7083" cy="168.2841" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="208.3333" x="479.1667" y="175.1953">RegionSet regions(long wayIdentifier)</text><ellipse cx="467.7083" cy="188.029" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="109.375" x="479.1667" y="194.9402">RegionSet regions()</text><ellipse cx="467.7083" cy="207.7738" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="268.75" x="479.1667" y="214.6851">RegionSet regions(Iterable&lt;Integer&gt; identifiers)</text><ellipse cx="467.7083" cy="251.4303" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="254.1667" x="479.1667" y="258.3415">void add(long nodeIdentifier, int regionIndex)</text><ellipse cx="467.7083" cy="271.1751" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="267.7083" x="479.1667" y="278.0863">void addAll(List&lt;Node&gt; nodes, int regionIndex)</text><ellipse cx="467.7083" cy="290.92" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="209.375" x="479.1667" y="297.8312">Region&lt;?&gt; regionForIndex(int index)</text><ellipse cx="467.7083" cy="310.6649" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="194.7917" x="479.1667" y="317.5761">RegionIndexMap regionIndexMap()</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="457.2917" x2="589.5833" y1="234.2662" y2="234.2662"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="62.5" x="592.7083" y="238.0758">(collection)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="658.3333" x2="790.625" y1="234.2662" y2="234.2662"/><ellipse cx="467.7083" cy="354.3213" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="206.25" x="479.1667" y="361.2325">Set&lt;Integer&gt; regionIndexes(PbfWay)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="457.2917" x2="592.1875" y1="337.1572" y2="337.1572"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="57.2917" x="595.3125" y="340.9668">(primitive)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="655.7292" x2="790.625" y1="337.1572" y2="337.1572"/><!--MD5=[cf588e34dfee24f5bc898ad5df666cd6]
class RegionWays--><rect codeLine="39" fill="#282828" height="234.0922" id="RegionWays" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="327.0833" x="50" y="433.9111"/><rect fill="#1B1B1A" height="31.3883" rx="8.3333" ry="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="327.0833" x="50" y="433.9111"/><rect fill="#1B1B1A" height="8.3333" style="stroke:#1B1B1A;stroke-width:1.0416666666666667;" width="327.0833" x="50" y="456.9661"/><rect codeLine="39" fill="none" height="234.0922" id="RegionWays" rx="8.3333" ry="8.3333" style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" width="327.0833" x="50" y="433.9111"/><ellipse cx="167.1875" cy="449.6053" fill="#0066CF" rx="10.4167" ry="10.4167" style="stroke:#0086EF;stroke-width:1.0416666666666667;"/><path d="M169.0979,454.0304 Q168.6707,454.2501 168.2007,454.3599 Q167.7307,454.4698 167.2119,454.4698 Q165.3687,454.4698 164.3982,453.2552 Q163.4277,452.0406 163.4277,449.7457 Q163.4277,447.4447 164.3982,446.2301 Q165.3687,445.0155 167.2119,445.0155 Q167.7307,445.0155 168.2068,445.1253 Q168.6829,445.2352 169.0979,445.4549 L169.0979,447.4569 Q168.634,447.0296 168.1976,446.8313 Q167.7612,446.6329 167.2974,446.6329 Q166.3086,446.6329 165.8051,447.4172 Q165.3015,448.2015 165.3015,449.7457 Q165.3015,451.2838 165.8051,452.0681 Q166.3086,452.8524 167.2974,452.8524 Q167.7612,452.8524 168.1976,452.654 Q168.634,452.4556 169.0979,452.0284 Z " fill="#000000"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="12.5" font-weight="bold" lengthAdjust="spacing" textLength="78.125" x="190.1042" y="454.3294">RegionWays</text><line style="stroke:#5E5E5E;stroke-width:1.5625;" x1="51.0417" x2="376.0417" y1="465.2995" y2="465.2995"/><ellipse cx="61.4583" cy="500.6694" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="207.2917" x="72.9167" y="507.5806">RegionWays(String, RegionIndexMap)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="51.0417" x2="169.7917" y1="483.5052" y2="483.5052"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="81.25" x="172.9167" y="487.3149">(constructors)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="257.2917" x2="376.0417" y1="483.5052" y2="483.5052"/><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="51.0417" x2="376.0417" y1="517.2892" y2="517.2892"/><ellipse cx="61.4583" cy="528.7476" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="208.3333" x="72.9167" y="535.6588">RegionSet regions(long wayIdentifier)</text><ellipse cx="61.4583" cy="548.4924" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="109.375" x="72.9167" y="555.4036">RegionSet regions()</text><ellipse cx="61.4583" cy="592.1488" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="164.5833" x="72.9167" y="599.0601">void add(Region&lt;?&gt;, PbfWay)</text><ellipse cx="61.4583" cy="611.8937" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="246.875" x="72.9167" y="618.8049">void add(int regionIndex, long wayIdentifier)</text><ellipse cx="61.4583" cy="631.6386" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="253.125" x="72.9167" y="638.5498">void addAll(int regionIndex, List&lt;Way&gt; ways)</text><ellipse cx="61.4583" cy="651.3835" fill="#84BE84" rx="3.125" ry="3.125" style="stroke:#038048;stroke-width:1.0416666666666667;"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="294.7917" x="72.9167" y="658.2947">boolean contains(int regionIndex, long wayIdentifier)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="51.0417" x2="179.1667" y1="574.9847" y2="574.9847"/><text fill="#D8BC00" font-family="Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif" font-size="11.4583" lengthAdjust="spacing" textLength="62.5" x="182.2917" y="578.7944">(collection)</text><line style="stroke:#5E5E5E;stroke-width:1.0416666666666667;" x1="247.9167" x2="376.0417" y1="574.9847" y2="574.9847"/><!--MD5=[b63145af497b1757027f3702c6ed0426]
link RegionIndexMap to RegionNodes--><!--MD5=[b7f9cf71ebbe4679282b311e6c883a77]
link RegionIndexMap to RegionWays--><!--MD5=[41061e5c8b1d0cfe1b6c16b91b28ad72]
@startuml

    !include lexakai.theme
    
    title "com.telenav.mesakit.map.cutter.cuts.maps"
    
    class RegionIndexMap
    {
        - -
        +RegionSet regionsForIndexes(Iterable<Integer> indexes)
        - -(collection)- -
        +void add(Region)
        +void addAll(Iterable<? extends Region> regions)
        +Count count()
        +Integer indexForRegion(Region)
        +boolean isValidRegionIndex(Integer regionIndex)
        +boolean isValidRegionIndexList(Collection<Integer> regionIndexes)
        +Region regionForIndex(int index)
        +int size()
    }
    
    class RegionNodes
    {
        - -(constructors)- -
        +RegionNodes(String, RegionIndexMap)
        - -
        +boolean inRegion(long nodeIdentifier, int regionIndex)
        +RegionSet regions(long wayIdentifier)
        +RegionSet regions()
        +RegionSet regions(Iterable<Integer> identifiers)
        - -(collection)- -
        +void add(long nodeIdentifier, int regionIndex)
        +void addAll(List<Node> nodes, int regionIndex)
        +Region<?> regionForIndex(int index)
        +RegionIndexMap regionIndexMap()
        - -(primitive)- -
        +Set<Integer> regionIndexes(PbfWay)
    }
    
    class RegionWays
    {
        - -(constructors)- -
        +RegionWays(String, RegionIndexMap)
        - -
        +RegionSet regions(long wayIdentifier)
        +RegionSet regions()
        - -(collection)- -
        +void add(Region<?>, PbfWay)
        +void add(int regionIndex, long wayIdentifier)
        +void addAll(int regionIndex, List<Way> ways)
        +boolean contains(int regionIndex, long wayIdentifier)
    }
    
@enduml

@startuml









skinparam backgroundColor #333333






skinparam  {
    defaultFontName   "Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif"
    defaultFontSize   12
    defaultTextAlignment left
    shadowing false
    RoundCorner 10
    TitleFontSize 18
}

skinparam defaultFontName       "Open Sans,Avenir,Nunito,Arial,Helvetica,SansSerif"
skinparam defaultFontSize       12
skinparam dpi                   100
skinparam shadowing             false
skinparam roundcorner           16
skinparam ParticipantPadding    40
skinparam BoxPadding            40
skinparam Padding               3
skinparam ArrowColor            #545454
skinparam stereotype {
    CBackgroundColor #0066cf
    CBorderColor #0086ef
    ABackgroundColor #C8Ac00
    ABorderColor #D8Bc00
    IBackgroundColor #008400
    IBorderColor #239c23
    EBackgroundColor #cf6300
    EBorderColor #ef8300
    NBackgroundColor #3380b9
    NBorderColor #004d86
}
skinparam title {
	FontColor	                 #c0c0c0
 	BorderColor                  #545454
	FontSize	    	         20
	BorderRoundCorner            16
	BorderThickness 	         1
	BackgroundColor              #48494b
}


skinparam legend {
	BackgroundColor #303030
	BorderColor #404040
	FontColor #a0a0a0
}

	skinparam swimlane {
	BorderColor #5e5e5e
	BorderThickness 2
	TitleBackgroundColor  #6d6d6d-#484848
	TitleFontColor #303030
}

skinparam activity {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BarColor #00FF00
	StartColor #0060a8
	EndColor #0060a8
	DiamondBackgroundColor #6d6d6d-#3a3a3a
  	DiamondBorderColor #3a3a3a
  	DiamondFontColor #fefefe
}


skinparam participant {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	ParticipantBorderThickness 2
}


skinparam actor {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam arrow {
	Thickness 1.5
	Color #545454
	FontColor #a0a0a0
    FontStyle bold
    MessageAlignment center
}



skinparam sequence {
	BorderColor #303030
	TitleFontColor #303030
	BackgroundColor #333333
	StartColor #303030
	EndColor #303030
	BoxBackgroundColor #333333
	BoxBorderColor #484848
	BoxFontColor #484848
	LifeLineBorderColor #484848
	LifeLineBorderThickness 2
	LifeLineBackgroundColor #3a3a3a
	GroupBorderColor #484848
	GroupFontColor #484848
	GroupHeaderFontColor #0060a8
	GroupBackgroundColor #484848
	GroupHeaderBackgroundColor #333333
	DividerBackgroundColor #484848
    DividerBorderColor #484848
    DividerBorderThickness 2
    DividerFontColor #D8Bc00
	ReferenceBackgroundColor #333333
	ReferenceBorderColor #484848
	ReferenceFontColor #fefefe
	ReferenceHeaderBackgroundColor #484848
}


skinparam partition {
	BorderColor #303030
	FontColor #333333
	BackgroundColor #333333
}


skinparam collections {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam control {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam entity {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam boundary {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam agent {
	BackgroundColor #ff8000
	BorderColor #ff9933
	FontColor #484848
}


skinparam note {
	BorderThickness 1
	BackgroundColor #1b1b1a
	BorderColor #5e5e5e
	FontSize 11
	FontColor #a0a0a0
}


skinparam artifact {
	BorderThickness 10
	BorderColor #5e5e5e
	BackgroundColor #1b1b1a
	FontColor #D8Bc00
}


skinparam component {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam interface {
	BackgroundColor  #008400
	BorderColor  #007F00
	FontColor #484848
}


skinparam storage {
	BackgroundColor #ff8000
  	BorderColor #cc6600
	FontColor #222222
}


skinparam node {
	BackgroundColor #333333
	BorderColor #333333
	FontColor #C8Ac00
}


skinparam cloud {
	BackgroundColor #484848-black
	BorderColor #484848
	FontColor #D8Bc00
}


skinparam database {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BackgroundColor  #333333
}


skinparam class {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	HeaderBackgroundColor #1b1b1a
    BackgroundColor #282828
    BorderColor #5e5e5e
 	StereotypeFontColor #a0a0a0
    StereotypeFontStyle bold
	BorderThickness 1
	AttributeFontColor #D8Bc00
	AttributeFontSize 11
    FontColor #D8Bc00
    FontStyle bold
}


skinparam object {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	StereotypeFontColor #484848
	BorderThickness 1
	AttributeFontColor #fefefe
	AttributeFontSize 11
}


skinparam usecase {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BorderThickness 2
	StereotypeFontColor #303030
}


skinparam rectangle {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BackgroundColor #333333
	BorderThickness 2
	StereotypeFontColor #303030
}


skinparam package {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	BackgroundColor #333333
	BorderThickness 2
}


skinparam folder {
	BackgroundColor #6d6d6d
  	BorderColor #ff8000
	FontColor #ff8000
	BorderThickness 2
}


skinparam frame {
	BackgroundColor #6d6d6d
  	BorderColor #0060a8
	FontColor #0060a8
	BorderThickness 2
}


skinparam state {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
	StartColor #0060a8
	EndColor #0060a8
	AttributeFontColor #fefefe
	AttributeFontSize 11
}


skinparam queue {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}


skinparam card {
	BackgroundColor #0060a8
	BorderColor #004d86
	FontColor $INFO_TEXT
}


skinparam file {
	BackgroundColor #6d6d6d-#484848
	BorderColor #0060a8
	FontColor #fefefe
}


skinparam stack {
		FontColor #C8Ac00
	BorderColor #333333
	BackgroundColor #333333-#333333
}

    
    title "com.telenav.mesakit.map.cutter.cuts.maps"
    
    class RegionIndexMap
    {
        - -
        +RegionSet regionsForIndexes(Iterable<Integer> indexes)
        - -(collection)- -
        +void add(Region)
        +void addAll(Iterable<? extends Region> regions)
        +Count count()
        +Integer indexForRegion(Region)
        +boolean isValidRegionIndex(Integer regionIndex)
        +boolean isValidRegionIndexList(Collection<Integer> regionIndexes)
        +Region regionForIndex(int index)
        +int size()
    }
    
    class RegionNodes
    {
        - -(constructors)- -
        +RegionNodes(String, RegionIndexMap)
        - -
        +boolean inRegion(long nodeIdentifier, int regionIndex)
        +RegionSet regions(long wayIdentifier)
        +RegionSet regions()
        +RegionSet regions(Iterable<Integer> identifiers)
        - -(collection)- -
        +void add(long nodeIdentifier, int regionIndex)
        +void addAll(List<Node> nodes, int regionIndex)
        +Region<?> regionForIndex(int index)
        +RegionIndexMap regionIndexMap()
        - -(primitive)- -
        +Set<Integer> regionIndexes(PbfWay)
    }
    
    class RegionWays
    {
        - -(constructors)- -
        +RegionWays(String, RegionIndexMap)
        - -
        +RegionSet regions(long wayIdentifier)
        +RegionSet regions()
        - -(collection)- -
        +void add(Region<?>, PbfWay)
        +void add(int regionIndex, long wayIdentifier)
        +void addAll(int regionIndex, List<Way> ways)
        +boolean contains(int regionIndex, long wayIdentifier)
    }
    
@enduml

PlantUML version 1.2021.01(Tue Feb 02 00:55:08 MST 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>