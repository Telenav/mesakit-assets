@startuml

    !include lexakai.theme
    
    title "com.telenav.mesakit.map.measurements.motion"
    
    abstract BaseStringConverter
    
    interface Comparable
    
    Acceleration o-- Speed : "change in"
    Acceleration o-- Duration : "per"
    class Acceleration
    {
        --(time)--
        +double asMetersPerSecondSquared()
        +double asMilesPerHourSquared()
        +Acceleration metersPerSecondSquared(double metersPerSecondSquared)
        +Acceleration milesPerHourSquared(double milesPerHourSquared)
    }
    
    BaseStringConverter <|-- Speed.Converter
    class Speed.Converter
    {
        --(constructors)--
        +Converter(Listener)
    }
    
    BaseStringConverter <|-- Speed.KilometersPerHourConverter
    class Speed.KilometersPerHourConverter
    {
        --(constructors)--
        +KilometersPerHourConverter(Listener)
    }
    
    BaseStringConverter <|-- Speed.MicroDegreesPerSecondConverter
    class Speed.MicroDegreesPerSecondConverter
    {
        --(constructors)--
        +MicroDegreesPerSecondConverter(Listener)
    }
    
    BaseStringConverter <|-- Speed.MilesPerHourConverter
    class Speed.MilesPerHourConverter
    {
        --(constructors)--
        +MilesPerHourConverter(Listener)
    }
    
    Comparable <|-- Speed
    Speed o-- Distance : "change in"
    Speed o-- Duration : "per"
    class Speed
    {
        --
        +Speed difference(Speed that)
        +Speed scale(Level coefficient)
        --(checks)--
        +boolean isBetween(Speed a, Speed b)
        +boolean isGreaterThan(Speed that)
        +boolean isGreaterThanOrEqualTo(Speed that)
        +boolean isInvalid()
        +boolean isLessThan(Speed that)
        +boolean isLessThanOrEqualTo(Speed that)
        +boolean isNone()
        --(math)--
        +Speed maximum(Speed that)
        +Speed minimum(Speed that)
        --(parsing)--
        +Speed parse(String text)
        +SwitchParser.Builder<Speed> speedSwitchParser(String name, String description)
        --(time)--
        +int asHundredthsOfAMilePerHour()
        +double asKilometersPerHour()
        +double asMetersPerHour()
        +double asMetersPerSecond()
        +int asMicroDegreesPerSecond()
        +double asMilesPerHour()
        +double asMillimetersPerHour()
        +Speed distancePerDuration(Distance, Duration)
        +Speed hundredthsOfAMilePerHour(int speedInHundredthsOfAMilePerHour)
        +Speed kilometersPerHour(double kph)
        +Speed metersPerHour(double metersPerHour)
        +Speed metersPerSecond(double metersPerSecond)
        +Speed microDegreesPerSecond(int value)
        +Speed milesPerHour(double mph)
        +Speed millimetersPerHour(long millimetersPerHour)
        +Duration timeToTravel(Distance length)
        +long timeToTravelInMilliseconds(Distance length)
    }
    
@enduml

