@startuml

    !include lexakai.theme
    
    title "com.telenav.mesakit.map.region"
    
    abstract BaseStringConverter
    
    interface Bordered
    interface Bounded
    interface Outline
    interface Intersectable
    
    BaseStringConverter <|-- Region.Converter
    class Region.Converter<R>
    {
        --(constructors)--
        +Converter(Listener)
    }
    
    class RegionLimits.Estimated
    {
    }
    
    class RegionLimits.Limit
    {
    }
    
    Bounded <|-- Region
    Bordered <|-- Region
    Intersectable <|-- Region
    Outline <|-- Region
    Region --> RegionType : "has"
    Region o-- RegionInstance
    Region o-- Region : "parent"
    abstract class Region<T>
    {
        --(constructors)--
        #Region()
        #Region(Region<?>, RegionInstance<T>)
        --
        +Collection<Region> allRegions()
        +RegionSet allRegionsMatching(String simplifiedPattern)
        +void bootstrap()
        +Location center()
        +RegionSet children()
        +Set<C> children(Class<C> type)
        +RegionCode code(PbfEntity<?>, String key)
        +Continent continent()
        +Country country()
        +Region<T> globalForRegionCode(RegionCode)
        +RegionInstance<T> instance()
        +Location intersection(Segment)
        +Collection<Region<?>> nestedChildren()
        +Region<?> parent()
        +Class<?> subclass()
        +RegionType<T> type(Class<T> regionClass)
        +RegionType<T> type()
        #RegionCode isoCode(PbfEntity<?>)
        --(checks)--
        +boolean isIsland()
        +boolean isValid()
        --(collection)--
        +boolean contains(Rectangle bounds)
        +boolean contains(Polyline)
        +boolean intersectsOrContains(Polyline)
        +List<LanguageIsoCode> languages()
        +MapLocale locale()
        +SwitchParser.Builder<RegionSet> regionListSwitchParser(Listener, String name, String description)
        --(command line parsing)--
        +ArgumentParser.Builder<Region> regionArgumentParser(Listener, String description)
        +SwitchParser.Builder<Region> regionSwitchParser(Listener, String name, String description)
        --(filesystem)--
        +FileName fileName()
        +Folder folder()
        --(identity)--
        +Region<?> globalForRegionIdentifier(RegionIdentifier)
        +RegionIdentifier identifier()
        --(lifecycle)--
        +void initialize()
        +void onInitialize()
        --(lookup)--
        +void register(Class regionClass, RegionType)
        --(math)--
        +boolean isLargerThan(Region<T> that)
        +Area largestArea()
        +Polygon largestBorder()
        --(metadata)--
        +void metadata(Object metadata)
        +Object metadata()
        --(naming)--
        +RegionCode name(PbfEntity<?>)
        --(network)--
        +URI geofabrikUri()
        --(read)--
        +void loadBordersInBackground()
        --(time)--
        +Duration estimatedGraphExtractionTime(Bytes size)
        +Duration estimatedPbfToGraphConversionTime(Bytes size)
    }
    
    BorderCache <|-- Region.RegionBorderCache
    class Region.RegionBorderCache<R>
    {
        --(constructors)--
        +RegionBorderCache(Settings<R>)
    }
    
    class RegionCode
    {
        --
        +RegionCode append(RegionCode that)
        +String code()
        +RegionCode fourth()
        +RegionCode third()
        --(checks)--
        +boolean hasCity()
        +boolean hasCountry()
        +boolean hasCounty()
        +boolean hasDistrict()
        +boolean hasMetropolitanArea()
        +boolean hasState()
        +boolean hasTimeZone()
        +boolean isCity()
        +boolean isContinent()
        +boolean isCountry()
        +boolean isCounty()
        +boolean isDistrict()
        +boolean isIso()
        +boolean isMesaKitn()
        +boolean isMetropolitanArea()
        +boolean isState()
        +boolean isTimeZone()
        +boolean isValid()
        +boolean isWorld()
        +boolean startsWithIgnoreCase(String prefix)
        --(collection)--
        +RegionCode first()
        +RegionCode first(int count)
        +RegionCode last()
        +int size()
        --(functional)--
        +RegionCode aonized()
        +RegionCode isoized()
        +RegionCode nameized()
        +RegionCode normalized()
        +RegionCode withoutPrefix(String prefix)
        --(parsing)--
        +RegionCode parse(String... parts)
        --(time)--
        +RegionCode second()
    }
    
    interface RegionType.RegionFactory<R>
    {
        --(factory)--
        +R newInstance(RegionIdentity)
    }
    
    class RegionIdentifier
    {
        --(constructors)--
        +RegionIdentifier(int)
        --(iteration)--
        +RegionIdentifier next()
    }
    
    RegionIdentity o-- RegionIdentifier
    RegionIdentity o-- RegionCode : "iso"
    RegionIdentity o-- RegionCode : "mesakit"
    class RegionIdentity
    {
        --(constructors)--
        +RegionIdentity()
        +RegionIdentity(RegionIdentity)
        +RegionIdentity(String)
        --
        +City city()
        +Continent continent()
        +Country country()
        +CountryIsoCode countryIsoCode()
        +int countryOrdinal()
        +Country.CountryTmcCode countryTmcCode()
        +County county()
        +RegionCode iso()
        +RegionCode mesakit()
        +MetropolitanArea metropolitanArea()
        +State state()
        +void testSetup()
        +RegionIdentity unqualified()
        --(checks)--
        +boolean hasIdentifier()
        +boolean hasIsoCode()
        +boolean hasMesaKitCode()
        +boolean isCity()
        +boolean isContinent()
        +boolean isCountry()
        +boolean isCounty()
        +boolean isDistrict()
        +boolean isMetropolitanArea()
        +boolean isState()
        +boolean isTimeZone()
        +boolean isValid()
        +boolean isWorld()
        --(collection)--
        +RegionIdentity first(int)
        +RegionIdentity last()
        --(functional)--
        +RegionIdentity withCountryIsoCode(CountryIsoCode)
        +RegionIdentity withCountryOrdinal(int ordinal)
        +RegionIdentity withCountryTmcCode(Country.CountryTmcCode)
        +RegionIdentity withIdentifier(RegionIdentifier)
        +RegionIdentity withIsoCode(String code)
        +RegionIdentity withIsoCode(RegionCode)
        +RegionIdentity withMesaKitCode(RegionCode)
        +RegionIdentity withMesaKitCode(String code)
        +RegionIdentity withName(String name)
        +RegionIdentity withPrefix(String prefix)
        +RegionIdentity withPrefix(RegionIdentity)
        +RegionIdentity withoutPrefix(String prefix)
        --(identity)--
        +RegionIdentity identifier(RegionIdentifier)
        +RegionIdentifier identifier()
        --(naming)--
        +String name()
        --(search)--
        +T findOrCreateRegion(Class<T> type)
        --(time)--
        +TimeZone timeZone()
    }
    
    RegionInstance o-- Country.AutomotiveSupportLevel
    RegionInstance o-- Rectangle : "bounds"
    RegionInstance o-- RegionSet : "children"
    RegionInstance o-- Country.DrivingSide
    RegionInstance o-- RegionIdentity
    RegionInstance "1" o-- "*" LanguageIsoCode
    RegionInstance o-- MapLocale
    class RegionInstance<T>
    {
        --(constructors)--
        +RegionInstance(Class<T>)
        --
        +Country.AutomotiveSupportLevel automotiveSupportLevel()
        +Collection<Polygon> borders()
        +Rectangle bounds()
        +RegionSet children()
        +Set<C> children(Class<C> type)
        +LanguageIsoCode defaultLanguage()
        +Country.DrivingSide drivingSide()
        +RegionInstance<T> identity(RegionIdentity)
        +RegionIdentity identity()
        +int ordinal()
        +RegionInstance<T> prefix(String prefix)
        +RegionInstance<T> prefix(Region<?> prefix)
        +T region()
        +RegionInstance<T> region(Region)
        +Class<T> subclass()
        --(checks)--
        +boolean isValid()
        --(collection)--
        +RegionInstance<T> add(Region<?>)
        +List<LanguageIsoCode> languages()
        +MapLocale locale()
        --(conversion)--
        +String toDebugString(int level)
        --(functional)--
        +RegionInstance<T> withAutomotiveSupportLevel(Country.AutomotiveSupportLevel)
        +RegionInstance<T> withBounds(Rectangle bounds)
        +RegionInstance<T> withDrivingSide(Country.DrivingSide)
        +RegionInstance<T> withIdentity(RegionIdentity)
        +RegionInstance<T> withLanguage(LanguageIsoCode)
        +RegionInstance<T> withLanguages(List<LanguageIsoCode> languages)
        +RegionInstance<T> withLocale(MapLocale)
        +RegionInstance<T> withOrdinal(int ordinal)
        --(naming)--
        +String name()
    }
    
    KryoTypes <|-- RegionKryoTypes
    class RegionKryoTypes
    {
        --(constructors)--
        +RegionKryoTypes()
    }
    
    class RegionLimits
    {
    }
    
    Project <|-- RegionProject
    class RegionProject
    {
        --(constructors)--
        +RegionProject()
        --(filesystem)--
        +Folder mesakitMapFolder()
        --(identity)--
        +Version borderDataVersion()
    }
    
    RegionSet --> "*" Region : "contains"
    class RegionSet
    {
        --(constructors)--
        +RegionSet()
        +RegionSet(Iterable<? extends Region>)
        +RegionSet(Set<Region>)
        --
        +RegionSet under()
    }
    
    class RegionType<T>
    {
        --(constructors)--
        +RegionType(Class<T>)
        --
        +Collection<T> all()
        +Collection<Region> allUntyped()
        +T forIdentity(RegionIdentity)
        +T forLocation(Location)
        +T forNumericCountryCode(int code)
        +T forRegionCode(RegionCode)
        +Collection<T> matching(Matcher<T>)
        --(collection)--
        +boolean contains(T region)
        +int size()
        --(functional)--
        +RegionType<T> withBorderCache(BorderCache<T>)
        +RegionType<T> withName(String name)
        --(identity)--
        +T forIdentifier(RegionIdentifier)
        --(math)--
        +RegionType<T> add(Region uncheckedRegion)
        +RegionIdentifier maximumIdentifier()
        +RegionIdentifier minimumIdentifier()
        +RegionType<T> withMaximumIdentifier(RegionIdentifier maximumIdentifier)
        +RegionType<T> withMinimumIdentifier(RegionIdentifier minimumIdentifier)
        --(naming)--
        +String name()
        --(read)--
        +RegionType<T> loadBorders()
        +RegionType<T> loadIdentities()
    }
    
    GeographyUnitTest <|-- RegionUnitTest
    class RegionUnitTest
    {
        --(constructors)--
        +RegionUnitTest()
        --
        #RegionCode code(String)
    }
    
    BaseStringConverter <|-- Region.SetConverter
    class Region.SetConverter
    {
        --(constructors)--
        +SetConverter(Listener)
    }
    
@enduml

