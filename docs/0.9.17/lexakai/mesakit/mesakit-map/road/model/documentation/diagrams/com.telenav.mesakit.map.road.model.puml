
@startuml

    !include lexakai.theme
    
    title "com.telenav.mesakit.map.road.model"
    
    interface Quantizable
    
    class BetweenCrossRoads
    {
        --(conversion)--
        +Intersection asIntersection()
        --(factory)--
        +BetweenCrossRoads newInstance(RoadName mainRoad, RoadName firstCrossStreet, RoadName secondCrossStreet)
        --(naming)--
        +RoadName getFirstCrossStreet()
        +RoadName getMainRoad()
        +RoadName getSecondCrossStreet()
    }
    
    enum BridgeType
    {
        BRIDGE
        NONE
        OVERBRIDGE
        TUNNEL
        UNDERPASS
    }
    
    QuantizableConverter <|-- SpeedCategory.Converter
    class SpeedCategory.Converter
    {
        --(constructors)--
        +Converter(Listener)
    }
    
    class DeCartaRoadType
    {
        --
        +DeCartaRoadType forType(int type)
        +int type()
        --(checks)--
        +boolean isLeastImportant()
        +boolean isMoreImportantThan(DeCartaRoadType that)
    }
    
    enum DirectionOfTrafficFlow
    {
        BOTH
        CLOSED
        NEGATIVE
        POSITIVE
        UNKNOWN
    }
    
    class ExitNumber
    {
        --(identity)--
        +ExitNumber forIdentifier(String identifier)
        +String identifier()
    }
    
    Quantizable <|-- GradeSeparation
    class GradeSeparation
    {
        --
        +GradeSeparation higher()
        +int level()
        +GradeSeparation lower()
        +GradeSeparation of(int level)
        --(checks)--
        +boolean isGreaterThan(GradeSeparation that)
        +boolean isGround()
        +boolean isHigherThan(GradeSeparation that)
        +boolean isLowerThan(GradeSeparation that)
        --(math)--
        +GradeSeparation maximum(GradeSeparation that)
    }
    
    enum HighwayType
    {
        ABANDONED
        ACCESS
        BRIDLEWAY
        BUS_GUIDEWAY
        BUS_STOP
        BYWAY
        CLOSED
        CONSTRUCTION
        CONVEYOR
        CORRIDOR
        CROSSING
        CYCLEWAY
        DEPOT
        DISMANTLED
        DISUSED
        DRIVEWAY
        ELEVATOR
        ESCALATOR
        ESCAPE
        FOOTWAY
        FORD
        GALLOP
        GIVE_WAY
        HALLWAY
        HISTORIC
        KERB
        LAYBY
        LIVING_STREET
        MINI_ROUNDABOUT
        MINOR
        MOTORWAY
        MOTORWAY_JUNCTION
        MOTORWAY_LINK
        NO
        NULL
        OLD
        PASSING_PLACE
        PATH
        PEDESTRIAN
        PLANNED
        PLATFORM
        PRIMARY
        PRIMARY_LINK
        PRIVATE
        PROPOSAL
        PROPOSED
        PUBLIC_TRANSPORT
        RACEWAY
        RAZED
        RESIDENTIAL
        RESIDENTIAL_LINK
        REST_AREA
        ROAD
        SECONDARY
        SECONDARY_LINK
        SERVICE
        SERVICES
        SIDEWALK
        STEPPING_STONES
        STEPS
        STREET_LAMP
        TERTIARY
        TERTIARY_LINK
        TOWPATH
        TRACK
        TRAIL
        TRUNK
        TRUNK_LINK
        TURNING_CIRCLE
        UNCLASSIFIED
        UNDEFINED
        UNKNOWN
        UNSURFACED
        VERGE
        WALKWAY
    }
    
    class Intersection
    {
        --
        +Intersection forStreets(RoadName mainStreet, RoadName crossStreet)
        --(naming)--
        +RoadName crossStreet()
        +RoadName mainStreet()
    }
    
    class NamedRoadTypeMileages
    {
        --
        +RoadTypeMileages get(String name)
        +Distance mileages()
        --(collection)--
        +void add(String name, RoadType, Distance mileage)
        +Iterable<String> names()
        +List<Entry<String,RoadTypeMileages>> sortedNamedRoadTypeMileages()
        --(functional)--
        +Distance namedMileages(String name)
    }
    
    enum OverpassUnderpassType
    {
        NONE
        OVERPASS
        UNDERPASS
    }
    
    enum RampType
    {
        BOTH
        NONE
        OFFRAMP
        ONRAMP
    }
    
    enum RoadFunctionalClass
    {
        FIRST_CLASS
        FOURTH_CLASS
        MAIN
        SECOND_CLASS
        THIRD_CLASS
        UNKNOWN
    }
    
    class RoadLimits
    {
    }
    
    Name <|-- RoadName
    class RoadName
    {
        --
        +T extract(Extractor<T,RoadName>)
        --(angle)--
        +Direction extractDirection()
        +Direction extractOctant()
        --(matching)--
        +Confidence matchConfidence(RoadName that, Direction thatDirection)
        +Confidence matchConfidence(RoadName that, List<Direction> thatDirections)
        --(naming)--
        +RoadName extractNameOnly()
        +RoadName forName(String name)
        +RoadName forName(String nameOnly, Direction)
        +RoadName normalize()
        +RoadName withoutDirection()
        +RoadName withoutHighwayIdentifiers()
        +RoadName withoutOctant()
    }
    
    enum RoadState
    {
        CLOSED
        NULL
        ONE_WAY
        TWO_WAY
    }
    
    enum RoadSubType
    {
        BRIDGE
        CONNECTING_ROAD
        FUNCTIONAL_SPECIAL_ROAD
        INTERSECTION_LINK
        MAIN_ROAD
        NULL
        OPEN_TRAFFIC_AREA
        OVERBRIDGE
        RAMP
        ROUNDABOUT
        SEPARATED_MAIN_ROAD
        SERVICE_ROAD
        TUNNEL
        UNDERPASS
    }
    
    enum RoadSurface
    {
        NOT_APPLICABLE
        PAVED
        POOR_CONDITION
        UNPAVED
    }
    
    enum RoadType
    {
        FERRY
        FREEWAY
        FRONTAGE_ROAD
        HIGHWAY
        LAYOUT
        LOCAL_ROAD
        LOW_SPEED_ROAD
        NON_NAVIGABLE
        NULL
        PRIVATE_ROAD
        PUBLIC_VEHICLE_ONLY
        RESERVED_1
        RESERVED_2
        THROUGHWAY
        TRAIN
        URBAN_HIGHWAY
        WALKWAY
    }
    
    class RoadTypeMileages
    {
        --
        +Distance mileage(RoadType)
        +Distance mileages()
        --(collection)--
        +void add(RoadType, Distance length)
        +Iterable<RoadType> roadTypes()
        +List<Entry<RoadType,Distance>> sortedRoadTypeMileages()
        --(math)--
        +Percent roadTypMileagePercent(RoadType)
    }
    
    class ShieldIcon
    {
        --(identity)--
        +ShieldIcon forIdentifier(String identifier)
        +String identifier()
    }
    
    Quantizable <|-- SpeedCategory
    class SpeedCategory
    {
        --
        +Speed average()
        +SpeedCategory forSpeed(Speed)
        +boolean includes(Speed)
        +Speed speed()
        --(identity)--
        +SpeedCategory forIdentifier(int category)
        +int identifier()
        --(math)--
        +Speed maximum()
        +Speed minimum()
    }
    
    enum RoadName.Type
    {
        ALTERNATE
        EXIT
        OFFICIAL
        ROUTE
    }
    
@enduml

