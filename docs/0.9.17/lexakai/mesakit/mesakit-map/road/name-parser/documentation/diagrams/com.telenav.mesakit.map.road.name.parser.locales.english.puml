
@startuml

    !include lexakai.theme
    
    title "com.telenav.mesakit.map.road.name.parser.locales.english"
    
    abstract BaseRoadNameParser
    
    EnglishRoadNameParser <|-- EnglishCanadaRoadNameParser
    class EnglishCanadaRoadNameParser
    {
    }
    
    EnglishTokenizer <|-- EnglishCanadaTokenizer
    class EnglishCanadaTokenizer
    {
    }
    
    BaseRoadNameParser <|-- EnglishRoadNameParser
    EnglishRoadNameParser --> ParsedRoadName.Builder : "creates"
    abstract class EnglishRoadNameParser
    {
        --
        #String number(Token)
        #String number()
        #String ordinal(Token)
        --(angle)--
        #String direction(Token)
        --(checks)--
        #boolean shouldCapitalize(Token previous, Token)
        --(naming)--
        #ParsedRoadName.Builder builder()
        --(parsing)--
        #void parseAndRemoveDirection()
        #void parseAndRemoveRoadType()
        #boolean parseNamedOrdinal()
        #boolean parseNumericOrdinal()
        #void parseRoadName()
        #String parseTwoDigitNamedOrdinal()
    }
    
    Tokenizer <|-- EnglishTokenizer
    class EnglishTokenizer
    {
        --
        #boolean lookingAtHighwayDesignator(SymbolStream)
        #Set<Token> roadTypes()
        --(checks)--
        +boolean isCardinalDirection(Token)
        +boolean isCloseParenthesis(Token)
        +boolean isDigit(Token)
        +boolean isInterstate(Token)
        +boolean isNamedDigit(Token)
        +boolean isNumericOrdinalSuffix(Token)
        +boolean isOnesDigit(Token)
        +boolean isOpenParenthesis(Token)
        +boolean isOrdinal(Token)
        +boolean isQuadrant(Token)
        +boolean isRoadType(Token)
        +boolean isTeensDigit(Token)
        +boolean isTensDigit(Token)
    }
    
    EnglishRoadNameParser <|-- EnglishUnitedStatesRoadNameParser
    class EnglishUnitedStatesRoadNameParser
    {
    }
    
    EnglishTokenizer <|-- EnglishUnitedStatesTokenizer
    class EnglishUnitedStatesTokenizer
    {
    }
    
@enduml

