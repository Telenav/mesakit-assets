
@startuml

    !include lexakai.theme
    
    title "com.telenav.mesakit.graph.specifications.common.graph.loader"
    
    abstract BaseGraphLoader
    abstract BaseRepeater
    
    interface Named
    interface GraphConverter
    
    class PbfGraphLoader.Configuration
    {
        --
        +Region cleanCutTo()
        --(configuration)--
        +Configuration cleanCutTo(Region cleanCutTo)
        +Configuration regionInformation(Boolean regionInformation)
        --(filtering)--
        +RelationFilter relationFilter()
        +Configuration relationFilter(RelationFilter)
        +PbfTagFilter tagFilter()
        +void tagFilter(PbfTagFilter)
        +Configuration wayFilter(WayFilter)
        +WayFilter wayFilter()
        --(messaging)--
        +Boolean regionInformation()
    }
    
    class PbfToGraphConverter.Configuration
    {
        --
        +void threads(Count threads)
        +boolean verify()
        --(collection)--
        +Count threads()
        --(configuration)--
        +Configuration addSideFilesTo(Graph)
        +Configuration freeFlowSideFile(File freeFlowSideFile)
        +Configuration loaderConfiguration(PbfGraphLoader.Configuration loaderConfiguration)
        +PbfGraphLoader.Configuration loaderConfiguration()
        +Configuration parallel(boolean parallel)
        +Configuration speedPatternFile(File speedPatternFile)
        +Configuration turnRestrictionsSideFile(File turnRestrictionsSideFile)
        +Configuration verify(boolean verify)
    }
    
    class RawPbfGraphLoader.ExtractedEdges
    {
        --(constructors)--
        +ExtractedEdges(List<? extends Edge>, PbfWay, RoadStateExtractor.ExtractedRoadState)
        --
        +Edge edge()
        +RoadStateExtractor.ExtractedRoadState state()
        +PbfWay way()
        --(collection)--
        +List<? extends Edge> edges()
    }
    
    BaseRepeater <|-- PbfFile
    Named <|-- PbfFile
    class PbfFile
    {
        --(constructors)--
        +PbfFile(File, PbfToGraphConverter.Configuration)
        --
        +Graph graph(ProgressReporter)
        --(filtering)--
        +boolean accepts(File)
        --(time)--
        +Time modifiedAt()
    }
    
    BaseGraphLoader <|-- PbfGraphLoader
    abstract class PbfGraphLoader
    {
        --
        +PbfGraphLoader phase(String phase)
        #String phase()
        --(configuration)--
        +void configure(Configuration)
        +Configuration newConfiguration(Metadata)
        #Configuration configuration()
        --(factory)--
        +PbfGraphLoader dataSourceFactory(PbfDataSourceFactory, Metadata)
        #PbfDataSourceFactory dataSourceFactory()
        --(metadata)--
        #Metadata metadata()
    }
    
    BaseRepeater <|-- PbfToGraphConverter
    GraphConverter <|-- PbfToGraphConverter
    abstract class PbfToGraphConverter
    {
        --(constructors)--
        #PbfToGraphConverter(Metadata)
        --
        #void onConverted(Graph)
        --(configuration)--
        +Configuration configuration()
        +void configure(Configuration)
        +Configuration defaultConfiguration()
        +Configuration newConfiguration(Metadata)
        --(extension points)--
        #Graph onConvert(PbfDataSourceFactory input, Metadata)
    }
    
    enum RawPbfGraphLoader.ProcessingDirective
    {
        ACCEPT
        REJECT
    }
    
    PbfGraphLoader <|-- RawPbfGraphLoader
    abstract class RawPbfGraphLoader
    {
        --(constructors)--
        #RawPbfGraphLoader(PbfDataSourceFactory, Metadata, PbfTagFilter)
        --
        #Location nodeToLocation(WayNode)
        #void onCleanCutCrossedBorder(WayNode, Location)
        #void onCleanCutInside(WayNode, Location)
        #void onCleanCutOutside(WayNode, Location)
        #ProcessingDirective onExtractEdge(ExtractedEdges)
        #void onProcessWayNode(GraphStore, WayNode, Location)
        #void onProcessedNode(GraphStore, PbfNode)
        #void onProcessedRelation(GraphStore, PbfRelation)
        #void onProcessedWay(GraphStore, PbfWay)
        #ProcessingDirective onProcessingNode(GraphStore, PbfNode)
        #ProcessingDirective onProcessingRelation(GraphStore, PbfRelation)
        #ProcessingDirective onProcessingWay(GraphStore, PbfWay)
        --(checks)--
        #boolean shouldStoreNodeLocation(PbfNode)
        --(collection)--
        +EdgeNodeMap edgeNodes()
        --(lifecycle)--
        #void onEndNodes()
    }
    
    class RawPbfGraphLoader.WayChunk
    {
    }
    
@enduml

