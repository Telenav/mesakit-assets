
@startuml

    !include lexakai.theme
    
    title "com.telenav.mesakit.graph.collections"
    
    abstract AbstractList
    abstract BaseStringConverter
    
    interface Set
    interface Iterable
    interface Bounded
    interface StringFormattable
    
    BaseStringConverter <|-- RelationSet.Converter
    class RelationSet.Converter
    {
        --(constructors)--
        +Converter(Graph, Separators, Listener)
    }
    
    BaseStringConverter <|-- EdgeSet.Converter
    class EdgeSet.Converter
    {
        --(constructors)--
        +Converter(Graph, Separators, Listener)
    }
    
    enum EdgePair.DoubleDigitizedType
    {
        MATCHING_NAMES
        MISMATCHED_NAMES
    }
    
    Iterable <|-- EdgePair
    Bounded <|-- EdgePair
    class EdgePair
    {
        --(constructors)--
        +EdgePair(Edge, Edge)
        --
        +Vertex connectingVertex()
        +Stream<Edge> parallelStream()
        +Stream<Edge> stream()
        --(angle)--
        +Angle angleBetween(Chirality)
        +Heading averageHeading(Chirality)
        +Angle smallestAngleBetween()
        --(checks)--
        +boolean isConnected()
        +boolean isConnectedByRoute(Navigator, Distance within)
        +boolean isConnectedInSameDirection()
        +boolean isDoubleDigitized(DoubleDigitizedType, Angle maximumHeadingDeviation)
        +boolean isDoubleDigitized()
        +boolean isOverlapping()
        +boolean isParallel()
        +boolean isParallel(Angle tolerance)
        +boolean isPerpendicular()
        +boolean isPerpendicular(Angle tolerance)
        +boolean isSameRoad()
        +boolean isStraight()
        +boolean isStraight(Angle tolerance)
        --(collection)--
        +boolean contains(Edge)
        +Edge first()
        --(conversion)--
        +Route asRoute()
        --(math)--
        +Percent closeness(Distance maximumSeparation, Angle maximumHeadingDeviation)
        --(time)--
        +Edge second()
    }
    
    Iterable <|-- EdgeSequence
    Bounded <|-- EdgeSequence
    class EdgeSequence
    {
        --(constructors)--
        +EdgeSequence(Iterable<Edge>)
        --
        +boolean crosses(Edge that)
        +EdgeSequence intersecting(Rectangle bounds)
        +EdgeSequence matching(GraphConstraints)
        +EdgeSequence matching(Matcher<Edge>)
        +EdgeSequence ofType(Edge.Type)
        +Stream<Edge> parallelStream()
        +void process(Listener, Callback<Edge>)
        +Stream<Edge> stream()
        +Stream<Edge> stream(Streams.Processing)
        +EdgeSequence within(Rectangle bounds)
        --(collection)--
        +List<Edge> asList()
        +Count count()
        +Count count(Maximum)
        --(conversion)--
        +EdgeSequence asDirectional()
        +Route asRoute()
        +EdgeSet asSet(Estimate)
        +EdgeSet asSet()
    }
    
    Set <|-- EdgeSet
    StringFormattable <|-- EdgeSet
    class EdgeSet
    {
        --(constructors)--
        +EdgeSet()
        +EdgeSet(Estimate)
        +EdgeSet(Maximum, Estimate)
        +EdgeSet(Maximum, Estimate, Set<Edge>)
        +EdgeSet(Set<Edge>)
        --
        +Rectangle bounds()
        +Edge center()
        +Differences differences(EdgeSet that)
        +EdgeSet forCollection(Maximum maximumSize, Collection<? extends Edge>)
        +EdgeSet inEdges(Vertex)
        +EdgeSet intersection(EdgeSet that)
        +String joinedIdentifiers(String separator)
        +Distance length()
        +EdgeSet logicalSetMatching(Matcher<Edge>)
        +EdgeSet matching(Matcher<Edge>)
        +Edge mostImportant()
        +EdgeSet of(Edge one)
        +EdgeSet of(Edge one, Edge... more)
        +EdgeSet oneWayEdges()
        +EdgeSet oneWayInEdges(Vertex)
        +EdgeSet oneWayOutEdges(Vertex)
        +EdgeSet outEdges(Vertex)
        +Edge parallelTo(Edge that, Angle tolerance)
        +Edge parallelTo(Edge that)
        +EdgeSet singleton(Edge)
        +EdgeSet threadSafe(Maximum maximumSize, Estimate initialSize)
        +EdgeSet twoWayEdges()
        +EdgeSet union(EdgeSet)
        +VertexSet vertexes()
        +EdgeSet within(Rectangle bounds)
        +EdgeSet without(Matcher<Edge>)
        +EdgeSet without(Edge exclude)
        +EdgeSet without(Set<Edge> exclude)
        --(checks)--
        +boolean hasMatch(Matcher<Edge>)
        +boolean hasOneWay()
        +boolean hasTwoWay()
        +boolean isOneWay()
        +boolean isTwoWay()
        --(collection)--
        +void add(Route)
        +void addAll(Edge[] edges)
        +LongArray asIdentifierArray()
        +List<Edge> asList()
        +RouteList asRouteList()
        +List<Route> asRoutes()
        +List<Edge> asSortedList()
        +boolean containsAny(Collection<Edge> edges)
        +Count count()
        +IntIterator edgeIndexIterator()
        +Edge first()
        +EdgeSet forIdentifierArray(Graph, LongArray identifiers)
        +EdgeSet forIterable(Estimate, Iterable<? extends Edge> collection)
        +Estimate initialSize()
        +Maximum maximumSize()
        --(conversion)--
        +Route asRoute()
        +EdgeSequence asSequence()
        +PbfWay asWay()
        --(functional)--
        +EdgeSet reversed()
        +Vertex sharedVertex()
        +EdgeSet withRoadName(RoadName)
        --(identity)--
        +Set<PbfWayIdentifier> wayIdentifiers()
    }
    
    AbstractList <|-- GraphList
    class GraphList
    {
        --(constructors)--
        +GraphList(FileList)
    }
    
    Iterable <|-- RelationSequence
    Bounded <|-- RelationSequence
    class RelationSequence
    {
        --(constructors)--
        +RelationSequence(Iterable<EdgeRelation>)
        --
        +RelationSequence intersecting(Rectangle bounds)
        +RelationSequence matching(GraphConstraints)
        +RelationSequence matching(Matcher<EdgeRelation>)
        +Stream<EdgeRelation> parallelStream()
        +Stream<EdgeRelation> stream()
        +RelationSequence within(Rectangle bounds)
        --(collection)--
        +List<EdgeRelation> asList()
        +Count count()
        +Count count(Maximum)
        --(conversion)--
        +EdgeSet asEdgeSet()
        +Route asRoute()
        +RelationSet asSet(Maximum)
    }
    
    Set <|-- RelationSet
    class RelationSet
    {
        --(constructors)--
        +RelationSet(Estimate)
        +RelationSet(Maximum, Estimate)
        +RelationSet(Maximum, Estimate, Set<EdgeRelation>)
        --
        +Rectangle bounds()
        +RelationSet forCollection(Maximum maximumSize, Collection<? extends EdgeRelation>)
        +RelationSet intersection(RelationSet that)
        +String joinedIdentifiers(String separator)
        +Distance length()
        +RelationSet matching(Matcher<EdgeRelation>)
        +EdgeRelation mostImportant()
        +RelationSet singleton(EdgeRelation)
        +Stream<EdgeRelation> stream(Streams.Processing)
        +RelationSet threadSafe(Maximum maximumSize)
        +RelationSet union(RelationSet)
        +RelationSet within(Rectangle bounds)
        +RelationSet without(EdgeRelation exclude)
        +RelationSet without(Set<EdgeRelation> exclude)
        +RelationSet without(Matcher<EdgeRelation>)
        --(collection)--
        +void addAll(EdgeRelation[] relations)
        +LongArray asIdentifierArray()
        +boolean containsAny(Collection<EdgeRelation> relations)
        +Count count()
        +EdgeRelation first()
        +RelationSet forIdentifierArray(Graph, LongArray identifiers)
        +RelationSet forIterable(Maximum, Iterable<? extends EdgeRelation> collection)
        +Estimate initialSize()
        +Maximum maximumSize()
        +Set<MapRelationIdentifier> relationIdentifiers()
        --(conversion)--
        +RelationSet asHeavyWeight()
        +RelationSequence asSequence()
        --(matching)--
        +boolean hasMatch(Matcher<EdgeRelation>)
    }
    
    Iterable <|-- RouteList
    class RouteList
    {
        --(constructors)--
        +RouteList()
        +RouteList(Iterable<Route>)
        --(collection)--
        +void add(Route edge)
        +ObjectList<Route> asRoutes()
        +void clear()
        --(conversion)--
        +EdgeSet asEdgeSet()
        +Route asRoute()
    }
    
    enum EdgeSequence.Type
    {
        EDGES
        FORWARD_EDGES
    }
    
    Iterable <|-- VertexSequence
    class VertexSequence
    {
        --(constructors)--
        +VertexSequence(Iterable<Vertex>)
        --
        +EdgeSet edges()
        +VertexSequence inside(Rectangle bounds)
        +VertexSequence matching(Matcher<Vertex>)
        +Stream<Vertex> parallelStream()
        +Stream<Vertex> stream(Streams.Processing)
        +Stream<Vertex> stream()
        --(collection)--
        +Count count()
        --(conversion)--
        +Route asRoute()
    }
    
    ObjectSet <|-- VertexSet
    class VertexSet
    {
        --(constructors)--
        +VertexSet()
        +VertexSet(Maximum)
        +VertexSet(Set<Vertex>)
        --
        +VertexSet forCollection(Maximum, Collection<? extends Vertex>)
        +VertexSet inside(Rectangle bounds)
        +VertexSet intersection(Set<Vertex> vertexes)
        +String joinedIdentifiers(String separator)
        +VertexSet singleton(Vertex)
        +VertexSet union(Set<Vertex> that)
        +VertexSet without(Vertex exclude)
        +VertexSet without(Set<Vertex> exclude)
        --(collection)--
        +VertexSet forIterable(Maximum, Iterable<? extends Vertex> collection)
    }
    
@enduml

