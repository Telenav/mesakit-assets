
@startuml

    !include lexakai.theme
    
    title "com.telenav.mesakit.map.geography"
    
    abstract BaseStringConverter
    
    interface Bounded
    interface Located
    interface Intersectable
    
    BaseStringConverter <|-- Location.Converter
    class Location.Converter
    {
        --(constructors)--
        +Converter(Listener)
        --
        +void type(Type)
    }
    
    BaseStringConverter <|-- Longitude.DegreesConverter
    class Longitude.DegreesConverter
    {
        --(constructors)--
        +DegreesConverter(Listener)
    }
    
    BaseStringConverter <|-- Location.DegreesConverter
    class Location.DegreesConverter
    {
        --(constructors)--
        +DegreesConverter(Listener)
        +DegreesConverter(Listener, Separators)
    }
    
    BaseStringConverter <|-- Latitude.DegreesConverter
    class Latitude.DegreesConverter
    {
        --(constructors)--
        +DegreesConverter(Listener)
    }
    
    BaseStringConverter <|-- Longitude.DegreesMinutesAndSecondsConverter
    class Longitude.DegreesMinutesAndSecondsConverter
    {
        --(constructors)--
        +DegreesMinutesAndSecondsConverter(Listener)
    }
    
    BaseStringConverter <|-- Location.DegreesMinutesAndSecondsConverter
    class Location.DegreesMinutesAndSecondsConverter
    {
        --(constructors)--
        +DegreesMinutesAndSecondsConverter(Listener)
        +DegreesMinutesAndSecondsConverter(Listener, Separators)
    }
    
    BaseStringConverter <|-- Latitude.DegreesMinutesAndSecondsConverter
    class Latitude.DegreesMinutesAndSecondsConverter
    {
        --(constructors)--
        +DegreesMinutesAndSecondsConverter(Listener)
    }
    
    BaseStringConverter <|-- Location.Dm5Converter
    class Location.Dm5Converter
    {
        --(constructors)--
        +Dm5Converter(Listener)
        +Dm5Converter(Listener, Separators)
    }
    
    BaseStringConverter <|-- Precision.Dm5LatitudeConverter
    class Precision.Dm5LatitudeConverter
    {
        --(constructors)--
        +Dm5LatitudeConverter(Listener)
    }
    
    BaseStringConverter <|-- Precision.Dm5LongitudeConverter
    class Precision.Dm5LongitudeConverter
    {
        --(constructors)--
        +Dm5LongitudeConverter(Listener)
    }
    
    BaseStringConverter <|-- Precision.Dm6LatitudeConverter
    class Precision.Dm6LatitudeConverter
    {
        --(constructors)--
        +Dm6LatitudeConverter(Listener)
    }
    
    BaseStringConverter <|-- Precision.Dm6LongitudeConverter
    class Precision.Dm6LongitudeConverter
    {
        --(constructors)--
        +Dm6LongitudeConverter(Listener)
    }
    
    BaseStringConverter <|-- Precision.Dm7LatitudeConverter
    class Precision.Dm7LatitudeConverter
    {
        --(constructors)--
        +Dm7LatitudeConverter(Listener)
    }
    
    BaseStringConverter <|-- Precision.Dm7LongitudeConverter
    class Precision.Dm7LongitudeConverter
    {
        --(constructors)--
        +Dm7LongitudeConverter(Listener)
    }
    
    KryoTypes <|-- GeographyKryoTypes
    class GeographyKryoTypes
    {
        --(constructors)--
        +GeographyKryoTypes()
    }
    
    class GeographyLimits
    {
    }
    
    Project <|-- GeographyProject
    class GeographyProject
    {
        --(constructors)--
        +GeographyProject()
    }
    
    Angle <|-- Latitude
    class Latitude
    {
        --
        +Distance distanceTo(Latitude that)
        +Latitude dm5(int latitudeInDm5)
        +Latitude dm6(int latitudeInDm6)
        +Latitude dm7(int latitudeInDm7)
        +double inRange(double degrees)
        +Latitude nanodegrees(long nanodegrees)
        --(angle)--
        +Latitude angle(Angle)
        +Latitude degrees(double degrees)
        +Latitude degreesInRange(double degrees)
        +Latitude degreesMinutesAndSeconds(int degrees, float minutes, float seconds)
        +Latitude microdegrees(int microdegrees)
        --(checks)--
        +boolean isValid(double latitude)
        --(conversion)--
        +int as(Precision)
        +Height asHeight()
        --(math)--
        +Latitude maximum(Latitude that)
        +Latitude minimum(Latitude that)
    }
    
    interface LocationSequence
    LocationSequence <|-- Located
    interface Located
    {
        --
        +Location location()
    }
    
    Location <|-- LocatedHeading
    class LocatedHeading
    {
        --(constructors)--
        +LocatedHeading(Location, Heading)
        --(angle)--
        +Heading heading()
    }
    
    Located <|-- Location
    Bounded <|-- Location
    Intersectable <|-- Location
    Location --> Precision : "represented at"
    Location o-- Latitude
    Location o-- Longitude
    class Location
    {
        --(constructors)--
        +Location()
        +Location(Latitude, Longitude)
        +Location(Location)
        --
        +Distance distanceTo(Location that)
        +Distance distanceTo(Located that)
        +Location dm5(long location)
        +Location dm5(int latitudeInDm5, int longitudeInDm5)
        +Location dm6(int latitudeInDm6, int longitudeInDm6)
        +Location dm6(long location)
        +Location dm7(int latitudeInDm7, int longitudeInDm7)
        +Location dm7(long location)
        +Distance equirectangularDistanceTo(Location that)
        +Distance haversineDistanceTo(Location that)
        +int latitude(long latitudeAndLongitude)
        +Latitude latitude()
        +int latitudeInDm7()
        +Distance lawOfCosinesDistanceTo(Location that)
        +Longitude longitude()
        +int longitude(long latitudeAndLongitude)
        +int longitudeInDm7()
        +void main(String[] args)
        +Location offsetBy(Width)
        +Location offsetBy(Latitude, Longitude)
        +Location offsetBy(Height)
        +Location offsetBy(Dimensioned sized)
        +Offset offsetTo(Location)
        +Distance preciseDistanceTo(Location that)
        +Location quantize(Distance quantum)
        +Rectangle rectangle(Dimensioned sized)
        +Location relativeTo(Location that)
        +Location relativeTo(Latitude, Longitude)
        +Rectangle within(Distance)
        --(angle)--
        +Location degrees(double latitude, double longitude)
        +Heading headingTo(Location that)
        +double latitudeInDegrees()
        +double longitudeInDegrees()
        --(checks)--
        +boolean isClose(Location that, Distance)
        +boolean isClose(Location that, Angle tolerance)
        +boolean isOrigin()
        --(collection)--
        +Size size()
        --(command line parsing)--
        +SwitchParser.Builder<Location> locationSwitchParser(String name, String description)
        --(conversion)--
        +Point asAwtPointInMicroDegrees()
        +long asDecimal(Precision)
        +long asDecimalLong(Precision)
        +long asDm5Long()
        +long asDm6Long()
        +long asDm7Long()
        +Height asHeight()
        +long asLong(Precision)
        +Rectangle asRectangle()
        +Size asSize()
        +Width asWidth()
        +Segment to(Location to)
        +long toLong(int latitude, int longitude)
        --(distance)--
        +long equirectangularDistanceBetweenInMillimeters(long fromLatitudeInDm7, long fromLongitudeInDm7, long toLatitudeInDm7, long toLongitudeInDm7)
        +long equirectangularDistanceToInMillimeters(Location that)
        --(functional)--
        +Location decremented()
        +Location incremented()
        +Location moved(Heading, Distance offset)
        +Location scaledBy(double latitudeScale, double longitudeScale)
        +Location withLatitude(Latitude)
        +Location withLongitude(Longitude)
        --(math)--
        +Location minus(Height)
        +Location minus(Dimensioned sized)
        +Location minus(Width)
        --(primitive)--
        +Location fromLong(long locationInDm7)
    }
    
    interface LocationSequence
    {
        --
        +LocationSequence of(List<Location> locations)
        --(collection)--
        +Iterable<Location> locationSequence()
    }
    
    Angle <|-- Longitude
    class Longitude
    {
        --
        +Distance distanceTo(Longitude that, Latitude)
        +Longitude dm5(int longitudeInDm5)
        +Longitude dm6(int longitudeInDm6)
        +Longitude dm7(int longitudeInDm7)
        +double inRange(double degrees)
        +Longitude nanodegrees(long nanodegrees)
        --(angle)--
        +Longitude angle(Angle)
        +Longitude degrees(double degrees)
        +Longitude degreesInRange(double degrees)
        +Longitude degreesMinutesAndSeconds(int degrees, float minutes, float seconds)
        +Longitude microdegrees(int microdegrees)
        --(checks)--
        +boolean isValid(double longitude)
        --(conversion)--
        +int as(Precision)
        +Width asWidth()
        --(math)--
        +Longitude maximum(Longitude that)
        +Longitude minimum(Longitude that)
    }
    
    enum Precision
    {
        DM5
        DM6
        DM7
        NONE
    }
    
    enum Location.Converter.Type
    {
        DEGREES
        DM5
    }
    
    Vector --> Location : "offsets"
    class Vector
    {
        --(constructors)--
        +Vector(Distance)
        +Vector(Heading, Distance)
        --
        +Location offset(Location that)
    }
    
@enduml

