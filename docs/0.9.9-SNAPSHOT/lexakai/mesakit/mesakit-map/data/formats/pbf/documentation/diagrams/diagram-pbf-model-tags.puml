@startuml

    !include lexakai.theme
    
    title "PBF Tagging"
    
    interface PbfTagFilter
    interface Keyed
    
    PbfTagMap <|-- EmptyPbfTagMap
    class EmptyPbfTagMap
    {
        --(constructors)--
        #EmptyPbfTagMap()
    }
    
    PbfTagFilter --> Tag : "filters"
    interface PbfTagFilter
    {
        --(filtering)--
        +boolean accepts(Tag)
    }
    
    PbfTagList --> Tag : "stores"
    class PbfTagList
    {
        --
        +Tag get(String key)
        +Tag get(int index)
        +void retainOnly(Set<String> keys)
        --(checks)--
        +boolean isValid()
        --(collection)--
        +PbfTagList add(Tag)
        +PbfTagList add(String key, String value)
        +PbfTagList addAll(Iterable<Tag> tags)
        +List<Tag> asList()
        +boolean containsKey(String key)
        +PbfTagList copy()
        +PbfTagList create()
        +PbfTagList from(Collection<Tag> tags)
        +PbfTagList from(Collection<Tag> tags, PbfTagFilter)
        +boolean isEmpty()
        +PbfTagList matchingKey(String key)
        +PbfTagList of(Tag)
        +void removeKey(String key)
        +PbfTagList set(int index, String key, String value)
        +int size()
        +PbfTagList sorted()
        +String valueForKey(String key)
        +String valueForKey(String key, String defaultValue)
        +PbfTagList withoutKey(String key)
    }
    
    Keyed <|-- PbfTagMap
    PbfTagMap --> Tag : "stores"
    class PbfTagMap
    {
        --(constructors)--
        #PbfTagMap(int)
        --
        +String get(String key, String defaultValue)
        +Tag tag(String key)
        +int valueAsNaturalNumber(String key)
        +boolean valueIsNo(String key)
        +boolean valueIsYes(String key)
        --(collection)--
        +boolean containsKey(String key)
        +PbfTagMap create()
        +PbfTagMap from(Collection<Tag> tags)
        +PbfTagMap from(Collection<Tag> tags, PbfTagFilter)
        +boolean isEmpty()
        +Iterator<String> keys()
        +void put(String key, String value)
        +void putAll(Iterable<Tag> tags)
        +int size()
        +String value(String key)
        +StringList valueSplit(String key)
        --(primitive)--
        +int valueAsInt(String key)
        +long valueAsLong(String key)
    }
    
    PbfTagFilter <|-- PbfTagPatternFilter
    class PbfTagPatternFilter
    {
        --(constructors)--
        +PbfTagPatternFilter(String)
        --
        +Set<String> allFilteredTags()
        +Set<String> rejectedTags()
        --(filtering)--
        +PbfTagPatternFilter forPattern(String pattern)
        +SwitchParser.Builder<PbfTagPatternFilter> tagFilterSwitchParser(String name, String description)
        +SwitchParser.Builder<PbfTagPatternFilter> tagFilterSwitchParser()
    }
    
    PbfTags --> Tag : "provides utilities for"
    class PbfTags
    {
        --(collection)--
        +PropertyMap tags(String prefix, Collection<Tag> tags)
        +List<Tag> tags(String prefix, PropertyMap properties)
        --(parsing)--
        +Tag parse(String)
    }
    
@enduml

