@startuml

    !include lexakai.theme
    
    title "com.telenav.mesakit.graph.specifications.common.edge.store"
    
    ArchivedGraphElementStore <|-- EdgeStore
    abstract class EdgeStore
    {
        --(constructors)--
        #EdgeStore(Graph)
        --
        +EdgeSequence edges()
        +EdgeSequence forwardEdges()
        +void merge(boolean merging)
        +Rectangle retrieveBounds(Edge)
        +BridgeType retrieveBridgeType(Edge)
        +Country retrieveCountry(Edge)
        +SpeedCategory retrieveFreeFlow(Edge)
        +boolean retrieveIsTollRoad(Edge)
        +boolean retrieveIsUnderConstruction(Edge)
        +Set<EdgeRelation> retrieveRelations(Edge)
        +RoadFunctionalClass retrieveRoadFunctionalClass(Edge)
        +Polyline retrieveRoadShape(Edge)
        +RoadState retrieveRoadState(Edge)
        +RoadSubType retrieveRoadSubType(Edge)
        +RoadSurface retrieveRoadSurface(Edge)
        +RoadType retrieveRoadType(Edge)
        +Speed retrieveSpeedLimit(Edge)
        +void storeAttributes(Edge)
        +void storeFreeFlow(Edge, Speed)
        +void storeRelation(Edge, EdgeRelation)
        +void storeRoadShape(Edge, Polyline shape)
        +void storeRoadSubType(Edge, RoadSubType)
        +void storeTurnRestriction(Route restriction)
        --(checks)--
        +boolean isOneWay(Edge)
        +boolean isTwoWay(Edge)
        --(collection)--
        +Count addAll(EdgeSequence, GraphConstraints)
        +void commitSpatialIndex(boolean commitSpatialIndex)
        +boolean contains(Edge)
        +boolean contains(EdgeIdentifier)
        +boolean contains(PbfWayIdentifier)
        +Edge edgeForIndex(int index)
        +Count retrieveForwardEdgeCount()
        +MapNodeIdentifier retrieveFromNodeIdentifier(Edge)
        +Count retrieveHovLaneCount(Edge)
        +Count retrieveLaneCount(Edge)
        +List<RoadName> retrieveRoadNames(Edge, RoadName.Type)
        +MapNodeIdentifier retrieveToNodeIdentifier(Edge)
        +RTreeSpatialIndex<Edge> spatialIndex()
        --(distance)--
        +long retrieveLengthInMillimeters(Edge)
        --(identity)--
        +long nextEdgeIdentifier(long wayIdentifier)
        +int retrieveFromVertexIdentifier(Edge)
        +Route retrieveRouteForWayIdentifier(MapWayIdentifier)
        +int retrieveToVertexIdentifier(Edge)
        +void storeFromVertexIdentifier(Edge)
        +void storeToVertexIdentifier(Edge)
        --(io)--
        +boolean retrieveIsClosedToThroughTraffic(Edge)
        --(naming)--
        +void storeRoadName(Edge, RoadName.Type, RoadName)
    }
    
@enduml

