@startuml

    !include lexakai.theme
    
    title "com.telenav.mesakit.graph.specifications.osm.graph.loader.sectioner"
    
    abstract BaseGraphLoader
    abstract BaseRepeater
    
    class EdgeNodeMap
    {
        --(constructors)--
        +EdgeNodeMap(String)
        --(collection)--
        +List<MapNodeIdentifier> get(EdgeIdentifier)
        +void put(EdgeIdentifier, List<MapNodeIdentifier> nodes)
    }
    
    class EdgeSection
    {
        --(constructors)--
        +EdgeSection(Edge, List<MapNodeIdentifier>, Polyline)
        --
        +HeavyWeightEdge edge(EdgeIdentifier)
        +Edge edge()
        +Distance length()
        +EdgeSection section(PolylineSection)
        +Polyline shape()
        --(collection)--
        +EdgeSectionList bisect()
        +MapNodeIdentifier from()
        +List<MapNodeIdentifier> nodes()
        +EdgeSectionList section(PolylineSectioner)
        +int size()
        +MapNodeIdentifier to()
        +EdgeSectionList trisect()
        --(conversion)--
        +Segment asSegment()
    }
    
    ArrayList <|-- EdgeSectionList
    class EdgeSectionList
    {
        --(collection)--
        +List<Edge> edges()
    }
    
    BaseRepeater <|-- EdgeSectioner
    class EdgeSectioner
    {
        --(constructors)--
        +EdgeSectioner(Graph, PbfDataAnalysis, EdgeNodeMap, Distance)
        --
        +void debugger(EdgeSectionerDebugger, Set<PbfWayIdentifier> waysToDebug)
        --(collection)--
        +List<Edge> section(Edge)
    }
    
    interface EdgeSectionerDebugger
    {
        --
        +void update(EdgeSection)
        --(lifecycle)--
        +void start()
        +void stop()
    }
    
    BaseGraphLoader <|-- WaySectioningGraphLoader
    class WaySectioningGraphLoader
    {
        --(constructors)--
        +WaySectioningGraphLoader(Graph, EdgeSectioner)
    }
    
@enduml

